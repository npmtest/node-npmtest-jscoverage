{"/home/travis/build/npmtest/node-npmtest-jscoverage/test.js":"/* istanbul instrument in package npmtest_jscoverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jscoverage/lib.npmtest_jscoverage.js":"/* istanbul instrument in package npmtest_jscoverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jscoverage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jscoverage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jscoverage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jscoverage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jscoverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jscoverage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jscoverage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jscoverage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jscoverage.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jscoverage.__dirname + '/lib.npmtest_jscoverage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jscoverage/node_modules/jscoverage/index.js":"/*!\n * jscoverage: index.js\n * Authors  : fish <zhengxinlin@gmail.com> (https://github.com/fishbar)\n * Create   : 2014-04-03 15:20:13\n * CopyRight 2014 (c) Fish And Other Contributors\n *\n */\nrequire('coffee-script').register();\nvar debug = require('debug')('jscoverage');\nvar fs = require('xfs');\nvar path = require('path');\nvar argv = require('optimist').argv;\nvar patch = require('./lib/patch');\nvar rptUtil = require('./reporter/util');\nvar cmd = argv['$0'];\nvar MODE_MOCHA = false;\nprocess.__MOCHA_PREPARED = false;\nvar FLAG_LOCK = false;\nif (/mocha/.test(cmd)) {\n  MODE_MOCHA = true;\n}\n\nif (MODE_MOCHA) {\n  prepareMocha();\n}\nvar COV_REPORT_NAME = argv.name || 'jscoverage reporter';\n/**\n * prepare env for mocha test\n * @covignore\n */\nfunction prepareMocha() {\n  var covIgnore = argv.covignore;\n  var cwd = process.cwd();\n  var covlevel = argv.coverage;\n  if (process.__MOCHA_PREPARED) {\n    return;\n  }\n  process.__MOCHA_PREPARED = true;\n  if (covlevel) {\n    var tmp = covlevel.split(',');\n    covlevel = {\n      high: parseInt(tmp[0], 10) / 100,\n      middle: parseInt(tmp[1], 10) / 100,\n      low: parseInt(tmp[2], 10) / 100\n    };\n  } else {\n    covlevel = {\n      high: 0.9,\n      middle: 0.7,\n      low: 0.3\n    };\n  }\n  debug('covlevel', covlevel);\n  /**\n   * add after hook\n   * @return {[type]} [description]\n   */\n  var supportReporters = ['list', 'spec', 'tap'];\n  process.nextTick(function () {\n    try {\n      after(function () {\n        if (FLAG_LOCK) {\n          return;\n        }\n        FLAG_LOCK = true;\n        if (typeof _$jscoverage === 'undefined') {\n          return;\n        }\n        try {\n          if (argv.covout === 'none') {\n            return;\n          }\n          if (!argv.covout) {\n            var mochaR = argv.reporter || argv.R;\n            if (supportReporters.indexOf(mochaR) !== -1) {\n              argv.covout = mochaR;\n            } else {\n              argv.covout = 'list';\n            }\n          }\n          var reporter;\n          if (/^\\w+$/.test(argv.covout)) {\n            reporter = require('./reporter/' + argv.covout);\n          } else {\n            reporter = require(argv.covout);\n          }\n          reporter.process(_$jscoverage, exports.coverageStats(), covlevel, COV_REPORT_NAME, rptUtil);\n        } catch (e) {\n          console.error('jscoverage reporter error', e, e.stack);\n        }\n      });\n    } catch (e) {\n      // do nothing\n    }\n  });\n  if (argv.covinject) {\n    debug('covinject enabled');\n    patch.enableInject(true);\n  }\n  if (!covIgnore) {\n    try {\n      var stat = fs.statSync('.covignore');\n      stat && (covIgnore = '.covignore');\n      debug('.covignore file found!');\n    } catch (e) {\n      return;\n    }\n  }\n  try {\n    covIgnore = fs.readFileSync(covIgnore).toString().split(/\\r?\\n/g);\n    debug('loading .covignore file!');\n  } catch (e) {\n    throw new Error('jscoverage loading covIgnore file error:' + covIgnore);\n  }\n  var _ignore = [];\n  covIgnore.forEach(function (v, i, a) {\n    if (!v) {\n      return;\n    }\n    if (v.indexOf('/') === 0) {\n      v = '^' + cwd + v;\n    }\n    _ignore.push(new RegExp(v.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*')));\n  });\n\n  patch.setCovIgnore(_ignore, argv.overrideIgnore ? true : false);\n}\n\nvar jscoverage = require('./lib/jscoverage');\n\n/**\n * enableInject description\n * @param {Boolean} true or false\n */\nexports.enableInject = patch.enableInject;\n/**\n * config the inject function names\n * @param  {Object} obj  {get, replace, call, reset}\n * @example\n *\n *  jsc.config({get:'$get', replace:'$replace'});\n *\n *  =====================\n *\n *  testMod = require('testmodule');\n *  testMod.$get('name');\n *  testMod.$replace('name', obj);\n */\nexports.config = function (obj) {\n  var inject_functions = patch.getInjectFunctions();\n  for (var i in obj) {\n    inject_functions[i] = obj[i];\n  }\n};\n/**\n * process Code, inject the coverage code to the input Code string\n * @param {String} filename  jscoverage file flag\n * @param {Code} content\n * @return {Code} instrumented code\n */\nexports.process = jscoverage.process;\n\n/**\n * processFile, instrument singfile\n * @sync\n * @param  {Path} source  absolute Path\n * @param  {Path} dest    absolute Path\n * @param  {Object} option  [description]\n */\nexports.processFile = function (source, dest, option) {\n  var content;\n  var stats;\n  // test source is file or dir, or not a file\n  try {\n    stats = fs.statSync(source);\n    if (stats.isDirectory()) {\n      throw new Error('path is dir');\n    } else if (!stats.isFile()) {\n      throw new Error('path is not a regular file');\n    }\n  } catch (e) {\n    throw new Error('source file error' + e);\n  }\n\n  fs.sync().mkdir(path.dirname(dest));\n\n  content = fs.readFileSync(source).toString();\n  var sheBang = false;\n  if (content.charCodeAt(0) === 65279) {\n    content = content.substr(1);\n  }\n  // cut the shebang\n  if (content.indexOf('#!') === 0) {\n    var firstLineEnd = content.indexOf('\\n');\n    sheBang = content.substr(0, firstLineEnd + 1);\n    content = content.substr(firstLineEnd + 1);\n  }\n  // check if coffee script\n  var ext = path.extname(source);\n  if (ext === '.coffee' || ext === '.litcoffee') {\n    var CoffeeScript = require('coffee-script');\n    content = CoffeeScript.compile(content, {\n      filename: source\n    });\n  }\n  content = this.process(source, content);\n  if (sheBang) {\n    content = sheBang + content;\n  }\n  fs.writeFileSync(dest, content);\n};\n\nfunction fixData(num) {\n  return Math.round(num * 10000) / 10000;\n}\n/**\n * sum the coverage rate\n * @public\n */\nexports.coverageStats = function () {\n  var file;\n  var tmp;\n  var lineTotal;\n  var lineHits;\n  var branchTotal;\n  var branchHits;\n  var n, len;\n  var stats = {};\n  var branches, branchesMap, branch;\n  var line, start, offset;\n  if (typeof _$jscoverage === 'undefined') {\n    return;\n  }\n  for (var i in _$jscoverage) {\n    file = i;\n    tmp = _$jscoverage[i];\n    if (!tmp.length) {\n      continue;\n    }\n    // reset the counters;\n    lineTotal = lineHits = 0;\n    branchTotal = branchHits = 0;\n\n    for (n = 0, len = tmp.length; n < len; n++) {\n      if (tmp[n] !== undefined) {\n        lineTotal ++;\n        if (tmp[n] > 0) {\n          lineHits ++;\n        }\n      }\n    }\n    // calculate the branches coverage\n    branches = tmp.condition;\n    branchesMap = {};\n    for (n in branches) {\n      if (branches[n] === 0) {\n        branch = n.split('_');\n        line = branch[0];\n        start = parseInt(branch[1], 10);\n        offset = parseInt(branch[2], 10);\n        if (!branchesMap[line]) {\n          branchesMap[line] = [];\n        }\n        branchesMap[line].push([start, offset]);\n      } else {\n        branchHits ++;\n      }\n      branchTotal ++;\n    }\n    stats[file] = {\n      lineSloc: lineTotal,\n      lineHits: lineHits,\n      lineCoverage: lineTotal ? fixData(lineHits / lineTotal) : 1,\n      branchSloc: branchTotal,\n      branchHits: branchHits,\n      branchCoverage: branchTotal ? fixData(branchHits / branchTotal) : 1,\n      branches: branchesMap\n    };\n  }\n  return stats;\n};\n\n/**\n * get lcov report\n * @return {[type]} [description]\n */\nexports.getLCOV = function () {\n  var tmp;\n  var total;\n  var touched;\n  var n, len;\n  var lcov = '';\n  if (typeof _$jscoverage === 'undefined') {\n    return;\n  }\n  Object.keys(_$jscoverage).forEach(function (file) {\n    lcov += 'SF:' + file + '\\n';\n    tmp = _$jscoverage[file];\n    if (!tmp.length) {\n      return;\n    }\n    total = touched = 0;\n    for (n = 0, len = tmp.length; n < len; n++) {\n      if (tmp[n] !== undefined) {\n        lcov += 'DA:' + n + ',' + tmp[n] + '\\n';\n        total ++;\n        if (tmp[n] > 0) {\n          touched++;\n        }\n      }\n    }\n    lcov += 'end_of_record\\n';\n  });\n  return lcov;\n};\n","/home/travis/build/npmtest/node-npmtest-jscoverage/node_modules/jscoverage/lib/patch.js":"/*!\r\n * jscoverage: lib/patch.js\r\n * Authors  : fish <zhengxinlin@gmail.com> (https://github.com/fishbar)\r\n * Create   : 2014-04-03 15:20:13\r\n * CopyRight 2014 (c) Fish And Other Contributors\r\n */\r\nvar Module = require('module');\r\nvar path = require('path');\r\nvar fs = require('fs');\r\nvar argv = require('optimist').argv;\r\nvar jscoverage = require('./jscoverage');\r\n\r\nvar covInject = false;\r\nvar defaultCovIgnore = [\r\n  new RegExp('^' + process.cwd() + '/node_modules/'),\r\n  new RegExp('^' + process.cwd() + '/test/'),\r\n  new RegExp('\\.DS_Store'),\r\n  new RegExp('\\.svn'),\r\n  new RegExp('\\.git')\r\n];\r\nvar covIgnore = defaultCovIgnore;\r\n\r\nvar injectFunctions = {\r\n  get : '_get',\r\n  replace : '_replace',\r\n  call : '_call',\r\n  reset : '_reset',\r\n  test: '_test'\r\n};\r\n\r\nexports.getInjectFunctions = function () {\r\n  return injectFunctions;\r\n};\r\n\r\nexports.enableInject = function (bool) {\r\n  covInject = bool;\r\n};\r\nexports.setCovIgnore = function (ignore, bool) {\r\n  if (bool) {\r\n    covIgnore = ignore;\r\n  } else {\r\n    covIgnore = ignore.concat(defaultCovIgnore);\r\n  }\r\n};\r\n/**\r\n * do mock things here\r\n * @covignore\r\n */\r\n(function () {\r\n  if (Module.prototype.__jsc_patch__) {\r\n    return;\r\n  }\r\n  Module.prototype.__jsc_patch__ = true;\r\n  var origin_require = Module.prototype.require;\r\n  var processExts = ['.js', '.coffee', '.litcoffee'];\r\n  Module.prototype.require = function (filename) {\r\n    var needinject = covInject;\r\n    var ff = filename;\r\n    filename = Module._resolveFilename(filename, this);\r\n    var ext = path.extname(filename);\r\n    var flagjsc = checkModule(filename);\r\n    if (typeof filename  === 'object') {\r\n      filename = filename[0];\r\n    }\r\n    if (!flagjsc || processExts.indexOf(ext) === -1) {\r\n      return origin_require.call(this, filename);\r\n    }\r\n\r\n    var cachedModule = Module._cache[filename];\r\n    // take care of module cache\r\n    if (flagjsc && cachedModule && cachedModule.__coveraged__) {\r\n      return cachedModule.exports;\r\n    }\r\n    // console.log('jscoverage:', ff, 'cov', flagjsc, 'inject', needinject);\r\n    var module = new Module(filename, this);\r\n    try {\r\n      module.filename = filename;\r\n      module.paths = Module._nodeModulePaths(path.dirname(filename));\r\n      Module._extensions[ext](module, filename, {\r\n        flagjsc : flagjsc,\r\n        needinject : needinject\r\n      });\r\n      module.__coveraged__ = flagjsc;\r\n      module.loaded = true;\r\n      Module._cache[filename] = module;\r\n    } catch (err) {\r\n      delete Module._cache[filename];\r\n      console.error(filename, err.stack);\r\n      throw err;\r\n    }\r\n    return module.exports;\r\n  };\r\n  function stripBOM(content) {\r\n    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\r\n    // because the buffer-to-string conversion in `fs.readFileSync()`\r\n    // translates it to FEFF, the UTF-16 BOM.\r\n    if (content.charCodeAt(0) === 0xFEFF) {\r\n      content = content.slice(1);\r\n    }\r\n    return content;\r\n  }\r\n  Module._extensions['.js'] = function (module, filename, status) {\r\n    var content = fs.readFileSync(filename, 'utf8');\r\n    var tmpFuncBody;\r\n    var injectFn = exports.getInjectFunctions();\r\n    // trim first line when script is a shell script\r\n    // content = content.replace(/^\\#\\![^\\n]+\\n/, '');\r\n    if (status && status.flagjsc) {\r\n      content = jscoverage.process(filename, content);\r\n    }\r\n    if (status && status.needinject) {\r\n      tmpFuncBody = injectFunctionBody.toString().replace(/\\$\\$(\\w+)\\$\\$/g, function (m0, m1) {\r\n        return injectFunctions[m1];\r\n      });\r\n      tmpFuncBody = tmpFuncBody.split(/\\n/);\r\n      content += '\\n' + tmpFuncBody.slice(1, tmpFuncBody.length - 1).join('\\n');\r\n    }\r\n    module._compile(stripBOM(content), filename);\r\n  };\r\n  if (Module._extensions['.coffee']) {\r\n    Module._extensions['.coffee'] = Module._extensions['.litcoffee'] = function (module, filename, status) {\r\n      var CoffeeScript = require('coffee-script');\r\n      var content = CoffeeScript._compileFile(filename, false);\r\n      var tmpFuncBody;\r\n      var injectFn = exports.getInjectFunctions();\r\n      // trim first line when script is a shell script\r\n      // content = content.replace(/^\\#\\![^\\n]+\\n/, '');\r\n      if (status && status.flagjsc) {\r\n        content = jscoverage.process(filename, content);\r\n      }\r\n      if (status && status.needinject) {\r\n        tmpFuncBody = injectFunctionBody.toString().replace(/\\$\\$(\\w+)\\$\\$/g, function (m0, m1) {\r\n          return injectFunctions[m1];\r\n        });\r\n        tmpFuncBody = tmpFuncBody.split(/\\n/);\r\n        content += '\\n' + tmpFuncBody.slice(1, tmpFuncBody.length - 1).join('\\n');\r\n      }\r\n      module._compile(stripBOM(content), filename);\r\n    };\r\n  }\r\n})();\r\n\r\nfunction checkModule(module) {\r\n  // native module\r\n  if (!/\\//.test(module)) {\r\n    return false;\r\n  }\r\n\r\n  // modules in node_modules\r\n  var flagIgnore = false;\r\n  covIgnore.forEach(function (v) {\r\n    if (v.test(module)) {\r\n      flagIgnore = true;\r\n    }\r\n  });\r\n  return !flagIgnore;\r\n}\r\n\r\n/**\r\n * do not exec this function\r\n * @covignore\r\n */\r\nfunction injectFunctionBody() {\r\n  (function (){\r\n  if (module.exports._i_n_j_e_c_t_e_d_) {\r\n    return;\r\n  }\r\n  if (module.exports.$$call$$ || module.exports.$$get$$ ||\r\n      module.exports.$$replace$$ || module.exports.$$reset$$) {\r\n    throw new Error(\"[jscoverage] jscoverage can not inject function for this module, because the function is exists! using jsc.config({inject:{}})\");\r\n  }\r\n\r\n  var __r_e_p_l_a_c_e__ = {};\r\n  module.exports.$$replace$$ = function (name, obj) {\r\n    function stringify(obj) {\r\n      if (obj === null) {\r\n        return 'null';\r\n      }\r\n      if (obj === undefined){\r\n        return 'undefined';\r\n      }\r\n      if (!obj && isNaN(obj)){\r\n        return 'NaN';\r\n      }\r\n      if (typeof obj === 'string') {\r\n        return '\"' + obj.replace(/\"/g, '\\\\\"') + '\"';\r\n      }\r\n      if (typeof obj === 'number') {\r\n        return obj;\r\n      }\r\n      if (obj.constructor === Date) {\r\n        return 'new Date(' + obj.getTime() + ')';\r\n      }\r\n      if (obj.constructor === Function) {\r\n        return obj.toString();\r\n      }\r\n      if (obj.constructor === RegExp) {\r\n        return obj.toString();\r\n      }\r\n      var is_array = obj.constructor === Array ? true : false;\r\n      var res, i;\r\n      if (is_array) {\r\n        res = ['['];\r\n        for (i = 0; i < obj.length; i++) {\r\n          res.push(stringify(obj[i]));\r\n          res.push(',');\r\n        }\r\n        if (res[res.length - 1] === ',') {\r\n          res.pop();\r\n        }\r\n        res.push(']');\r\n      } else {\r\n        res = ['{'];\r\n        for (i in obj) {\r\n          res.push(i + ':' + stringify(obj[i]));\r\n          res.push(',');\r\n        }\r\n        if (res[res.length - 1] === ',')\r\n          res.pop();\r\n        res.push('}');\r\n      }\r\n      return res.join('');\r\n    }\r\n    if (!__r_e_p_l_a_c_e__.hasOwnProperty(name)) {\r\n        __r_e_p_l_a_c_e__[name] = eval(name);\r\n      }\r\n    eval(name + \"=\" + stringify(obj));\r\n  };\r\n  module.exports.$$reset$$ = function (name) {\r\n    var script;\r\n    if (name) {\r\n      script = 'if(__r_e_p_l_a_c_e__.hasOwnProperty(\"' + name + '\"))' + name + ' = __r_e_p_l_a_c_e__[\"' + name + '\"];';\r\n    } else {\r\n      script = 'for(var i in __r_e_p_l_a_c_e__){eval( i + \" = __r_e_p_l_a_c_e__[\\'\" + i + \"\\'];\");}';\r\n    }\r\n    eval(script);\r\n  };\r\n  module.exports.$$call$$ = module.exports.$$test$$ = function (func, args) {\r\n    var f, o;\r\n    if (func.match(/\\\\./)) {\r\n      func = func.split(\".\");\r\n      f = func[func.length - 1];\r\n      func.pop();\r\n      o = func.join(\".\");\r\n    } else {\r\n      f = func;\r\n      o = \"this\";\r\n    }\r\n    return eval(f + \".apply(\" + o + \",\" + JSON.stringify(args) + \")\");\r\n  };\r\n  module.exports.$$get$$ = function (objstr) {\r\n    return eval(objstr);\r\n  };\r\n  module.exports._i_n_j_e_c_t_e_d_ = true;\r\n})();\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-jscoverage/node_modules/jscoverage/lib/jscoverage.js":"/*!\n * jscoverage: lib/jscoverage.js\n * Authors  : fish <zhengxinlin@gmail.com> (https://github.com/fishbar)\n * Create   : 2014-04-03 15:20:13\n * CopyRight 2014 (c) Fish And Other Contributors\n */\nvar Instrument = require('./instrument');\n\n/**\n * do not exec this function\n * the function body will insert into instrument files\n *\n * _$jscoverage = {\n *   filename : {\n *     line1: 0\n *     line2: 1\n *     line3: undefined\n *     ....\n *     source: [],\n *     condition: [\n *       line_start_offset\n *     ]\n *   }\n * }\n * @covignore\n */\nfunction jscFunctionBody() {\n  // instrument by jscoverage, do not modifly this file\n  (function (file, lines, conds, source) {\n    var BASE;\n    if (typeof global === 'object') {\n      BASE = global;\n    } else if (typeof window === 'object') {\n      BASE = window;\n    } else {\n      throw new Error('[jscoverage] unknow ENV!');\n    }\n    if (BASE._$jscoverage) {\n      BASE._$jscmd(file, 'init', lines, conds, source);\n      return;\n    }\n    var cov = {};\n    /**\n     * jsc(file, 'init', lines, condtions)\n     * jsc(file, 'line', lineNum)\n     * jsc(file, 'cond', lineNum, expr, start, offset)\n     */\n    function jscmd(file, type, line, express, start, offset) {\n      var storage;\n      switch (type) {\n        case 'init':\n          if(cov[file]){\n            storage = cov[file];\n          } else {\n            storage = [];\n            for (var i = 0; i < line.length; i ++) {\n              storage[line[i]] = 0;\n            }\n            var condition = express;\n            var source = start;\n            storage.condition = condition;\n            storage.source = source;\n          }\n          cov[file] = storage;\n          break;\n        case 'line':\n          storage = cov[file];\n          storage[line] ++;\n          break;\n        case 'cond':\n          storage = cov[file];\n          storage.condition[line] ++;\n          return express;\n      }\n    }\n\n    BASE._$jscoverage = cov;\n    BASE._$jscmd = jscmd;\n    jscmd(file, 'init', lines, conds, source);\n  })('$file$', $lines$, $conds$, $source$);\n}\n/**\n * gen coverage head\n */\nfunction genCodeCoverage(instrObj) {\n  if (!instrObj) {\n    return '';\n  }\n  var code = [];\n  var filename = instrObj.filename;\n  // Fix windows path\n  filename = filename.replace(/\\\\/g, '/');\n  var lines = instrObj.lines;\n  var conditions = instrObj.conds;\n  var src = instrObj.source;\n  var jscfArray = jscFunctionBody.toString().split('\\n');\n  jscfArray = jscfArray.slice(1, jscfArray.length - 1);\n  var ff = jscfArray.join('\\n').replace(/(^|\\n) {2}/g, '\\n')\n    .replace(/\\$(\\w+)\\$/g, function (m0, m1){\n      switch (m1) {\n        case 'file':\n          return filename;\n        case 'lines':\n          return JSON.stringify(lines);\n        case 'conds':\n          return JSON.stringify(conditions);\n        case 'source':\n          return JSON.stringify(src);\n      }\n    });\n  code.push(ff);\n  code.push(instrObj.code);\n  return code.join('\\n');\n}\n\nexports.process = function (filename, content) {\n  if (!filename) {\n    throw new Error('jscoverage.process(filename, content), filename needed!');\n  }\n  filename = filename.replace(/\\\\/g, '/');\n  if (!content) {\n    return '';\n  }\n  var pwd = process.cwd();\n  var fname;\n  if (filename.indexOf(pwd) === 0) {\n    fname = filename.substr(pwd.length + 1);\n  } else {\n    fname = filename;\n  }\n  var instrObj;\n  var ist = new Instrument();\n  instrObj = ist.process(fname, content);\n  return genCodeCoverage(instrObj);\n};\n","/home/travis/build/npmtest/node-npmtest-jscoverage/node_modules/jscoverage/lib/instrument.js":"/*!\n * jscoverage: lib/instrument.js\n * Authors  : fish <zhengxinlin@gmail.com> (https://github.com/fishbar)\n * Create   : 2014-04-03 15:20:13\n * CopyRight 2014 (c) Fish And Other Contributors\n */\n/**\n * instrument code\n * @example\n *   var ist = new Instrument();\n *   var resCode = ist.process(str);\n */\nvar debug = require('debug')('cov:instrument');\nvar Uglify = require('uglify-js');\n\nfunction Instrument() {\n  /**\n   * filename needed\n   * @type {String}\n   */\n  this.filename = null;\n  /**\n   * store injected code\n   * @type {String}\n   */\n  this.code = null;\n  /**\n   * 储存line信息\n   * @type {Array}\n   */\n  this.lines = [];\n  /**\n   * 储存condition信息\n   * @type {Object}\n   */\n  this.conds = {};\n  /**\n   * source code in array\n   * @type {Array}\n   */\n  this.source = null;\n}\n\nInstrument.prototype = {\n  // 行类型\n  T_LINE: 'line',\n  T_COND: 'cond',\n  /**\n   * process code\n   * @public\n   * @param  {String} code source code\n   * @return {String} injected code\n   */\n  process: function (filename, code) {\n    if (!filename) {\n      throw new Error('[jscoverage]instrument need filename!');\n    }\n\n    //code = this.protectEmptyBlock(code);\n    var ist = this;\n    // parse ast\n    var ast = Uglify.parse(code);\n\n    this.filename = filename;\n    this.source = code.split(/\\r?\\n/);\n\n    // init walker\n    var walker = new Uglify.TreeWalker(function (node) {\n      if (ist.checkIfIgnore(node, walker.stack)) {\n        return;\n      }\n      var parent = this.parent();\n      if (node instanceof Uglify.AST_Conditional) { // 三元判断\n        debug('node type:', node.TYPE, 'parent type:', parent && parent.TYPE);\n        node.consequent = ist.inject('cond', node.consequent.start.line, node.consequent);\n        node.alternative = ist.inject('cond', node.alternative.start.line, node.alternative);\n      } else if (node.TYPE === 'Binary') {\n        debug('node type:', node.TYPE, 'parent type:', parent && parent.TYPE);\n        if (node.operator && ['||', '&&'].indexOf(node.operator) === -1) {\n          return;\n        }\n        if (!(node.left instanceof Uglify.AST_Constant)) {\n          node.left = ist.inject('cond', node.left.start.line, node.left);\n        }\n        if (!(node.right instanceof Uglify.AST_Constant)) {\n          node.right = ist.inject('cond', node.right.start.line, node.right);\n        }\n      }\n\n      else if (node instanceof Uglify.AST_If) {\n        debug('node type:', node.TYPE, 'parent type:', parent && parent.TYPE);\n        node.condition = ist.inject('cond', node.condition.start.line, node.condition);\n      }\n\n      var len = node.body ? node.body.length : 0;\n      if (len) {\n        var res = [];\n        var subNode;\n        for (var i = 0; i < len; i++) {\n          subNode = node.body[i];\n          if (ist.checkIfIgnore(subNode, walker.stack)) {\n            res.push(subNode);\n            continue;\n          }\n          if (subNode instanceof Uglify.AST_Statement) {\n            if (ist.ifExclude(subNode)) {\n              res.push(subNode);\n              continue;\n            }\n            res.push(ist.inject('line', subNode.start.line));\n          } else if (subNode instanceof Uglify.AST_Var) {\n            res.push(ist.inject('line', subNode.start.line));\n          }\n          res.push(subNode);\n        }\n        node.body = res;\n      }\n    });\n    // figure_out_scope\n    ast.figure_out_scope();\n    // walk process\n    ast.walk(walker);\n\n    var out = Uglify.OutputStream({\n      preserve_line : true,\n      comments: 'all',\n      beautify: true\n    });\n    // rebuild file\n    ast.print(out);\n    this.code = out.toString();\n    return this;\n  },\n  /**\n   * 注入覆盖率查询方法\n   * @private\n   * @param  {String} type  inject type, line | conds\n   * @param  {Number} line  line number\n   * @param  {Object} expr  any expression, or node, or statement\n   * @return {AST_Func} Object\n   */\n  inject: function (type, line, expr) {\n    var args = [];\n    if (type === this.T_LINE) {\n      this.lines.push(line);\n      args = [\n        new Uglify.AST_String({value: this.filename}),\n        new Uglify.AST_String({value: type}),\n        new Uglify.AST_Number({value: line})\n      ];\n    } else if (type === this.T_COND) {\n      var start = expr.start.col;\n      var offset = expr.end.endpos - expr.start.pos;\n      var key = line + '_' + start + '_' + offset;  // 编码\n      this.conds[key] = 0;\n      args = [\n        new Uglify.AST_String({value: this.filename}),\n        new Uglify.AST_String({value: type}),\n        new Uglify.AST_String({value: key}),\n        expr\n      ];\n    }\n\n    var call = new Uglify.AST_Call({\n      expression: new Uglify.AST_SymbolRef({name: '_$jscmd'}),\n      //end: new Uglify.AST_\n      args: args\n    });\n\n    if (type === this.T_LINE) {\n      return new Uglify.AST_SimpleStatement({\n        body: call,\n        end: new Uglify.AST_Token({value: ';'})\n      });\n    } else {\n      return call;\n    }\n  },\n  /**\n   * check if need inject\n   * @param  {AST_Node} node\n   * @return {Boolean}\n   */\n  ifExclude: function (node) {\n    if (node instanceof Uglify.AST_LoopControl) {\n      return false;\n    }\n    if (\n      node instanceof Uglify.AST_IterationStatement ||\n      node instanceof Uglify.AST_StatementWithBody ||\n      node instanceof Uglify.AST_Block\n    ) {\n      return true;\n    }\n  },\n  checkIfIgnore: function (node, stack) {\n    var cmt;\n    if (node.start && node.start.comments_before.length) {\n      cmt = node.start.comments_before[node.start.comments_before.length - 1];\n      if (/@covignore/.test(cmt.value) && !(node instanceof Uglify.AST_Toplevel)) {\n        node.__covignore = true;\n      }\n    }\n    if (node.__covignore) {\n      return true;\n    }\n    if (stack) {\n      for (var i = stack.length - 1; i > 0; i--) {\n        if (stack[i].__covignore) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  // protect something like `multiline(function(){/* asd */})`\n  protectEmptyBlock: function (node) {\n\n  }\n};\n\nmodule.exports = Instrument;"}